/**
 * @file
 * On-demand grids.
 */


// #############################################################################
// Mixins.

@mixin on-demand-grid-3-col {
  & > .column {
    @include grid-column($grid-column-count/3);

    margin-bottom: 1rem;

    &:nth-child(3n+1) {
      clear: left;
    }
    &:nth-child(3n+3) {
      clear: right;
    }
    &:nth-last-child(2):nth-child(3n+2),
    &:nth-last-child(2):nth-child(3n+1),
    &:nth-last-child(3):nth-child(3n+1)
    {
      margin-bottom: 0;
    }
  }
}

@mixin on-demand-grid-4-col {
  & > .column {
    @include grid-column($grid-column-count/4);

    margin-bottom: 1rem;

    &:nth-child(4n+1) {
      clear: left;
    }
    &:nth-child(4n+4) {
      clear: right;
    }
    &:nth-last-child(2):nth-child(4n+3),
    &:nth-last-child(2):nth-child(4n+2),
    &:nth-last-child(2):nth-child(4n+1),
    &:nth-last-child(3):nth-child(4n+2),
    &:nth-last-child(3):nth-child(4n+1),
    &:nth-last-child(4):nth-child(4n+1)
    {
      margin-bottom: 0;
    }
  }
}


// #############################################################################
// Shared.

.row--wrap {
  & > .column {
    @include vertical-whitespace();
  }
}


// #############################################################################
// 3 column grid.

.row--wrap--3 {
  @include breakpoint(wide) {
    @include on-demand-grid-3-col;
  }
}


// #############################################################################
// 4 column grid.

.row--wrap--4 {
  // Even the 4 col grid uses the 3 col mixin on not-big-enough screens.
  @media (min-width: map-get($breakpoints, wide)) and (max-width: map-get($breakpoints, wide-m-max)) {
    @include on-demand-grid-3-col;
  }
  @include breakpoint(wide-l) {
    @include on-demand-grid-4-col;
  }
}


// #############################################################################
// Flexboxified grids.

// It seems any of the hereby defined on-demand grids can be flexboxified by
// adding the classes row--wrap and row--flexbox--wide to them.

// Note: this will only work if a modernizr build is included and is producing
// an .mdz-flexbox class on the :root element.

// See https://css-tricks.com/snippets/css/a-guide-to-flexbox/ .

.row--flexbox--wide {
  @include breakpoint(wide) {
    .mdz-flexbox & {
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;

      &::before,
      &::after {
        display: none;
      }

      & > .column {
        display: flex;
        flex: 0 1 auto;
        float: none;

        & > .box {
          flex: 0 1 auto;
          width: 100%;
        }
      }
    }
  }
}


// #############################################################################
// LAYOUT 2 SIDEBARS.

// This layout is used (best) for the primary layout of a page.

// There are three sets of setups here: one for a symmetric arrangement (main
// column in the middle, sidebars on each sides), and two other ones, for
// grouping both sidebars onto one side (either left or right) of the main
// column.

// Default arrangement is a symmetric one: .column--main is in the center,
// sidebars surround it from each side.

// NOTE:
// The arrangements you don't use should be commented out in order to not weigh
// down the generated .css file.

.layout--2sb {
  .column--main + .column--sidebar,
  .column--sidebar + .column--sidebar {
    margin-top: map-get($grid-column-responsive-gutter, narrow)*2;
  }
}

// -----------------------------------------------------------------------------
// CONTENT-IN-MID: There is one sidebar: .column--sb--1

.layout--2sb.content-in-mid.has-1-sb.sb-1 {

  @include breakpoint(wide) {

    & > .column--main {
      @include grid-column(17);
      @include grid-column-position(7);
    }

    & > .column--sidebar {
      @include grid-column(7);
      @include grid-column-position(-17);
    }

    & > .column {
      margin-top: 0;
    }
  }

  @include breakpoint(wide-m) {

    & > .column--main {
      @include grid-column(16);
      @include grid-column-position(8);
    }

    // The sidebar's width is inherited from smaller screen;
    // + no need to offset it by one grid col, because it - being the last
    // column - is floated to the right.
  }
}

// -----------------------------------------------------------------------------
// CONTENT-IN-MID: There is one sidebar: .column--sb--2

.layout--2sb.content-in-mid.has-1-sb.sb-2 {

  @include breakpoint(wide) {

    & > .column--main {
      @include grid-column(17);
    }

    & > .column--sidebar {
      @include grid-column(7);
    }

    & > .column {
      margin-top: 0;
    }
  }

  @include breakpoint(wide-m) {

    & > .column--main {
      @include grid-column(16);
    }

    // The sidebar's width is inherited from smaller screen;
    // + no need to offset it by one grid col, because it - being the last
    // column - is floated to the right.
  }
}

// -----------------------------------------------------------------------------
// CONTENT-IN-MID: Present in the layout: both sidebars.

.layout--2sb.content-in-mid.has-2-sb {

  @include breakpoint(wide) {

    & > .column--main {
      @include grid-column(17);
      @include grid-column-position(7);
    }

    & > .column--sb--1 {
      @include grid-column(7);
      @include grid-column-position(-17);

      margin-top: 0;
    }

    & > .column--sb--2 {
      @include grid-column(24);
    }
  }

  @include breakpoint(wide-m) {

    & > .column--main {
      @include grid-column(16);
      @include grid-column-position(8);
    }

    & > .column--sb--1 {
      @include grid-column(7);
      @include grid-column-position(-16);
    }
  }

  @include breakpoint(wide-l) {
    .column--main {
      @include grid-column(14);
      @include grid-column-position(5);
    }
    .column--sb--1 {
      @include grid-column(5);
      @include grid-column-position(-14);
    }
    .column--sb--2 {
      @include grid-column(5);

      margin-top: 0;
    }

  }
}
