/**
 * @file
 * Grid definitions, floated grid layouts and prepared flexboxes.
 */


// #############################################################################
// Grid hack to make Foundation's grid work like Bootstrap's.

// I found the base for this mixin in
// bower_components/foundation-sites/scss/grid/_column.scss.
// $grid-column-responsive-gutter can be found and set in
// ./_sass-foundation-variables.scss.
@mixin container-paddings {
  @each $breakpoint, $gutter in $grid-column-responsive-gutter {
    $padding: rem-calc($gutter) / 2;

    @include breakpoint($breakpoint) {
      padding-left: $padding;
      padding-right: $padding;
    }
  }
}

.container {
  @include container-paddings;

  margin-left: auto;
  margin-right: auto;
  max-width: $global-width;
}

.row {
  @include grid-row-nest;

  max-width: none;
}


// #############################################################################
// Layout-fitters.

.l-fit {
  @include l-fit;
}


// #############################################################################
// Page levels and page centering.
// (Horizontal sections - often seen as full-width colourful stripes - on the
// page.)

.page__level {
  $level-vertical-padding: map-get($grid-column-responsive-gutter, narrow)*0.5;
  padding-top: rem-calc($level-vertical-padding);
  padding-bottom: rem-calc($level-vertical-padding);
}

.container {
  min-width: $page-min-width;
}

// -----------------------------------------------------------------------------
// Growing screens

@include breakpoint(wide) {
  .page__level {
    $gap: map-get($grid-column-responsive-gutter, wide);
    padding-top: rem-calc($gap);
    padding-bottom: rem-calc($gap);
  }
}
@include breakpoint(wide-m) {
  .page__level {
    $gap: map-get($visual-width-of-1-column, wide-m);
    padding-top: rem-calc($gap);
    padding-bottom: rem-calc($gap);
  }
}
@include breakpoint(wide-l) {
  .page__level {
    $gap: map-get($visual-width-of-1-column, wide-l);
    padding-top: rem-calc($gap);
    padding-bottom: rem-calc($gap);
  }
}
@include breakpoint(widest) {
  .page__level {
    $gap: map-get($visual-width-of-1-column, widest);
    padding-top: rem-calc($gap);
    padding-bottom: rem-calc($gap);
  }
}


// #############################################################################
// Main columns' and sidebars' arrangements.

.column--main + .column--sidebar {
  margin-top: map-get($grid-column-responsive-gutter, narrow)*2;
}

// -----------------------------------------------------------------------------
// Growing screens.

// Media query when the primary layout becomes multi-column.
@include breakpoint(wide) {
  .column--main + .column--sidebar {
    margin-top: 0;
  }
}


// #############################################################################
// Box arrangements.

.column {
  .box {
    margin-bottom: map-get($grid-column-responsive-gutter, narrow)*0.5;
  }
}

// -----------------------------------------------------------------------------
// Growing screens.

// Media query when the primary layout becomes multi-column.
@include breakpoint(wide) {
  .column {
    .box {
      margin-bottom: map-get($grid-column-responsive-gutter, wide);
    }
  }
}

@include breakpoint(wide-m) {
  .column {
    .box {
      margin-bottom: map-get($visual-width-of-1-column, wide-m)*0.5;
    }
  }
}

@include breakpoint(wide-l) {
  .column {
    .box {
      margin-bottom: map-get($visual-width-of-1-column, wide-l)*0.5;
    }
  }
}

@include breakpoint(widest) {
  .column {
    .box {
      margin-bottom: map-get($visual-width-of-1-column, widest)*0.5;
    }
  }
}

.column .box:last-child {
  margin-bottom: 0;
}
