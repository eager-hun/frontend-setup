/**
 * @file
 * Custom SASS mixins.
 *
 * Mixins vs Extending utility-role Placeholders?
 *
 * Mixins won, placeholders lost so badly that they will not be used. Repetition
 * originating from using mixins will be mitigated by gzip serving the resulting
 * files (gzip works well on repeated patterns, they say).
 *
 * @see
 * http://www.sitepoint.com/avoid-sass-extend/
 * http://csswizardry.com/2014/11/when-to-use-extend-when-to-use-a-mixin/
 *
 * NOTES on basic syntax:
 * @code
 *   @mixin test-mixin--box($bg: gold, $padding: 1em) {
 *     background: $bg;
 *     padding: $padding;
 *
 *     @if $bg == (gold) and $padding == (1em) {
 *       border: 1px solid red;
 *     }
 *     @else if $bg == (gold) and $padding != (1em) {
 *       border: 5px solid red;
 *     }
 *     @else {
 *       border: 3px solid black;
 *     }
 *   }
 * @endcode
 */


// #############################################################################
// Resets.

@mixin bare-list {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

// Foundation seems to do this already.
@mixin strip-button {
  appearance: none;
  background-color: transparent;
  border: none;
  margin: 0;
  padding: 0;
}


// #############################################################################
// Basic utils.

@mixin hidden {
  // Hiding texts visually, but enabling screen readers to read them.
  // See http://webaim.org/techniques/css/invisiblecontent/ .
  height: 1px;
  left: -9999em;
  top: auto;
  overflow: hidden;
  position: absolute;
  width: 1px;
}


// #############################################################################
// Layout.

@mixin n-clearfix {
  // 'n' stands for the name of the author, @necolas.
  // See http://nicolasgallagher.com/micro-clearfix-hack/ .
  &:before,
  &:after {
    content: ' ';
    display: table;
  }
  &:after {
    clear: both;
  }
  // WARNING: This rule interferes with :before and :after pseudo-elements.
  //          Take that into account when applying this anywhere.
}

// Passes control of providing whitespace between groups of contents to
// containing elements (e.g. layouts), by removing possibly disruptive margins
// from the children.
@mixin l-fit {
  & > *:first-child {
    margin-top: 0;
  }
  & > *:last-child {
    margin-bottom: 0;
  }
}


// #############################################################################
// Typography.

@mixin pseudo-heading-base {
  // These things come straight from
  // bower_components/foundation-sites/scss/typography/_base.scss.
  // We might need them to format non-heading elements as headings.
  font-family: $header-font-family;
  font-weight: $header-font-weight;
  font-style: $header-font-style;
  color: $header-color;
  text-rendering: $header-text-rendering;
  margin-top: 0;
  margin-bottom: $header-margin-bottom;
  line-height: $header-lineheight;

  small {
    color: $header-small-font-color;
    line-height: 0;
  }
}

@mixin pseudo-heading($heading) {
  // Getting the font size for the requested element.
  // I found the base for this in
  // bower_components/foundation-sites/scss/typography/_base.scss too.
  @each $size, $headers in $header-sizes {
    @include breakpoint($size) {
      $size-defs: map-get($header-sizes, $size);
      font-size: rem-calc(map-get($size-defs, $heading));
    }
  }
}

// Offsets text such way that its line-height will not influence how it seems
// to fit with its surroundings.
@mixin line-height-fit($line-height, $pos, $correction: 0) {
  // Take the part of line-height that's above 1, half it (as it is distributed
  // on the top and the bottom), then add an em unit on it.
  // The $correction allows for custom adjustments, which might be neccessary,
  // depending on the characteristics of the actual font being used.
  $offset: ($line-height - 1)*0.5*(1+$correction);
  $offset-w-unit: $offset * 1em;
  margin-#{$pos}: -$offset-w-unit;
}

@mixin page-title-appearance {
  @include pseudo-heading-base;
  @include pseudo-heading(h1);

  margin-top: map-get($grid-column-responsive-gutter, narrow)* 0.5 * -1;
  margin-bottom: 0;
  padding-top: 1em;
  padding-bottom: 1em;

  @include breakpoint(wide) {
    @include line-height-fit($header-lineheight, top, 1.75);
    @include line-height-fit($header-lineheight, bottom, 1.75);

    padding-top: 0;
    padding-bottom: 1.25em;
  }
  // These calculations provide whitespace below the page title that is
  // identical to the whitespace between the page title and the header (the
  // .page__level's padding).
  @include breakpoint(wide-m) {
    padding-bottom: rem-calc(map-get($breakpoints, wide-m)/$grid-column-count) + map-get($grid-column-responsive-gutter, wide);
  }
  @include breakpoint(wide-l) {
    padding-bottom: $global-width/$grid-column-count + map-get($grid-column-responsive-gutter, wide);
  }
}

@mixin box-title-appearance {
  @include pseudo-heading-base;
  @include pseudo-heading(h4);
  @include line-height-fit($header-lineheight, top, 1.75);
}

// #############################################################################
// Colors.

@mixin override-link-color($color) {
  & {
    border-bottom: 1px solid rgba($color, 0.5);
    text-decoration: none;
  }
  &,
  &:visited,
  &:hover,
  &:visited:hover {
    color: $color;
  }
  &:hover {
    border-bottom-color: $color;
  }
  &:focus {
    outline: 1px dotted rgba($color, 0.5);
    border-bottom: none;
  }
}

@mixin text-color-invert-zone {
  color: white;

  a:not([class]) {
    @include override-link-color($color: white);
  }
}
